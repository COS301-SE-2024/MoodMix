// Mocks generated by Mockito 5.4.4 from annotations
// in frontend/test/camera.test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:camera/camera.dart' as _i3;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i9;
import 'package:frontend/auth/auth_service.dart' as _i5;
import 'package:frontend/components/audio_service.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMediaSettings_0 extends _i1.SmartFake implements _i2.MediaSettings {
  _FakeMediaSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraDescription_1 extends _i1.SmartFake
    implements _i2.CameraDescription {
  _FakeCameraDescription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraValue_2 extends _i1.SmartFake implements _i3.CameraValue {
  _FakeCameraValue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXFile_3 extends _i1.SmartFake implements _i2.XFile {
  _FakeXFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_4 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String?> registration({
    required String? email,
    required String? password,
    required String? username,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registration,
          [],
          {
            #email: email,
            #password: password,
            #username: username,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<_i7.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i6.Future<_i7.User?>.value(),
      ) as _i6.Future<_i7.User?>);
}

/// A class which mocks [CameraController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraController extends _i1.Mock implements _i3.CameraController {
  MockCameraController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MediaSettings get mediaSettings => (super.noSuchMethod(
        Invocation.getter(#mediaSettings),
        returnValue: _FakeMediaSettings_0(
          this,
          Invocation.getter(#mediaSettings),
        ),
      ) as _i2.MediaSettings);

  @override
  _i2.CameraDescription get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _FakeCameraDescription_1(
          this,
          Invocation.getter(#description),
        ),
      ) as _i2.CameraDescription);

  @override
  _i2.ResolutionPreset get resolutionPreset => (super.noSuchMethod(
        Invocation.getter(#resolutionPreset),
        returnValue: _i2.ResolutionPreset.low,
      ) as _i2.ResolutionPreset);

  @override
  bool get enableAudio => (super.noSuchMethod(
        Invocation.getter(#enableAudio),
        returnValue: false,
      ) as bool);

  @override
  int get cameraId => (super.noSuchMethod(
        Invocation.getter(#cameraId),
        returnValue: 0,
      ) as int);

  @override
  _i3.CameraValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeCameraValue_2(
          this,
          Invocation.getter(#value),
        ),
      ) as _i3.CameraValue);

  @override
  set value(_i3.CameraValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void debugCheckIsDisposed() => super.noSuchMethod(
        Invocation.method(
          #debugCheckIsDisposed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> prepareForVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #prepareForVideoRecording,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> pausePreview() => (super.noSuchMethod(
        Invocation.method(
          #pausePreview,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resumePreview() => (super.noSuchMethod(
        Invocation.method(
          #resumePreview,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setDescription(_i2.CameraDescription? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDescription,
          [description],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.XFile> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i6.Future<_i2.XFile>.value(_FakeXFile_3(
          this,
          Invocation.method(
            #takePicture,
            [],
          ),
        )),
      ) as _i6.Future<_i2.XFile>);

  @override
  _i6.Future<void> startImageStream(_i3.onLatestImageAvailable? onAvailable) =>
      (super.noSuchMethod(
        Invocation.method(
          #startImageStream,
          [onAvailable],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopImageStream() => (super.noSuchMethod(
        Invocation.method(
          #stopImageStream,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> startVideoRecording(
          {_i3.onLatestImageAvailable? onAvailable}) =>
      (super.noSuchMethod(
        Invocation.method(
          #startVideoRecording,
          [],
          {#onAvailable: onAvailable},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.XFile> stopVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #stopVideoRecording,
          [],
        ),
        returnValue: _i6.Future<_i2.XFile>.value(_FakeXFile_3(
          this,
          Invocation.method(
            #stopVideoRecording,
            [],
          ),
        )),
      ) as _i6.Future<_i2.XFile>);

  @override
  _i6.Future<void> pauseVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #pauseVideoRecording,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resumeVideoRecording() => (super.noSuchMethod(
        Invocation.method(
          #resumeVideoRecording,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i4.Widget buildPreview() => (super.noSuchMethod(
        Invocation.method(
          #buildPreview,
          [],
        ),
        returnValue: _FakeWidget_4(
          this,
          Invocation.method(
            #buildPreview,
            [],
          ),
        ),
      ) as _i4.Widget);

  @override
  _i6.Future<double> getMaxZoomLevel() => (super.noSuchMethod(
        Invocation.method(
          #getMaxZoomLevel,
          [],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<double> getMinZoomLevel() => (super.noSuchMethod(
        Invocation.method(
          #getMinZoomLevel,
          [],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<void> setZoomLevel(double? zoom) => (super.noSuchMethod(
        Invocation.method(
          #setZoomLevel,
          [zoom],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setFlashMode(_i2.FlashMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFlashMode,
          [mode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setExposureMode(_i2.ExposureMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExposureMode,
          [mode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setExposurePoint(_i8.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setExposurePoint,
          [point],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<double> getMinExposureOffset() => (super.noSuchMethod(
        Invocation.method(
          #getMinExposureOffset,
          [],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<double> getMaxExposureOffset() => (super.noSuchMethod(
        Invocation.method(
          #getMaxExposureOffset,
          [],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<double> getExposureOffsetStepSize() => (super.noSuchMethod(
        Invocation.method(
          #getExposureOffsetStepSize,
          [],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<double> setExposureOffset(double? offset) => (super.noSuchMethod(
        Invocation.method(
          #setExposureOffset,
          [offset],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<void> lockCaptureOrientation(
          [_i9.DeviceOrientation? orientation]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lockCaptureOrientation,
          [orientation],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setFocusMode(_i2.FocusMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setFocusMode,
          [mode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> unlockCaptureOrientation() => (super.noSuchMethod(
        Invocation.method(
          #unlockCaptureOrientation,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setFocusPoint(_i8.Offset? point) => (super.noSuchMethod(
        Invocation.method(
          #setFocusPoint,
          [point],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CameraDescription].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraDescription extends _i1.Mock implements _i2.CameraDescription {
  MockCameraDescription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i2.CameraLensDirection get lensDirection => (super.noSuchMethod(
        Invocation.getter(#lensDirection),
        returnValue: _i2.CameraLensDirection.front,
      ) as _i2.CameraLensDirection);

  @override
  int get sensorOrientation => (super.noSuchMethod(
        Invocation.getter(#sensorOrientation),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [AudioRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorder extends _i1.Mock implements _i11.AudioRecorder {
  MockAudioRecorder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get mood => (super.noSuchMethod(
        Invocation.getter(#mood),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set mood(List<String>? _mood) => super.noSuchMethod(
        Invocation.setter(
          #mood,
          _mood,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get transcription => (super.noSuchMethod(
        Invocation.getter(#transcription),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#transcription),
        ),
      ) as String);

  @override
  set transcription(String? _transcription) => super.noSuchMethod(
        Invocation.setter(
          #transcription,
          _transcription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> openRecorder() => (super.noSuchMethod(
        Invocation.method(
          #openRecorder,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> record() => (super.noSuchMethod(
        Invocation.method(
          #record,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopRecorder() => (super.noSuchMethod(
        Invocation.method(
          #stopRecorder,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> transcribeAudioAndAnalyze(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #transcribeAudioAndAnalyze,
          [filePath],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
